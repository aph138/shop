// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/stock.proto

package stock_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockClient interface {
	AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*AddItemResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	GetItemList(ctx context.Context, in *GetItemListRequest, opts ...grpc.CallOption) (Stock_GetItemListClient, error)
}

type stockClient struct {
	cc grpc.ClientConnInterface
}

func NewStockClient(cc grpc.ClientConnInterface) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/Stock/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/Stock/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetItemList(ctx context.Context, in *GetItemListRequest, opts ...grpc.CallOption) (Stock_GetItemListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stock_ServiceDesc.Streams[0], "/Stock/GetItemList", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockGetItemListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stock_GetItemListClient interface {
	Recv() (*GetItemListResponse, error)
	grpc.ClientStream
}

type stockGetItemListClient struct {
	grpc.ClientStream
}

func (x *stockGetItemListClient) Recv() (*GetItemListResponse, error) {
	m := new(GetItemListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServer is the server API for Stock service.
// All implementations must embed UnimplementedStockServer
// for forward compatibility
type StockServer interface {
	AddItem(context.Context, *Item) (*AddItemResponse, error)
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	GetItemList(*GetItemListRequest, Stock_GetItemListServer) error
	mustEmbedUnimplementedStockServer()
}

// UnimplementedStockServer must be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (UnimplementedStockServer) AddItem(context.Context, *Item) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedStockServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedStockServer) GetItemList(*GetItemListRequest, Stock_GetItemListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItemList not implemented")
}
func (UnimplementedStockServer) mustEmbedUnimplementedStockServer() {}

// UnsafeStockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServer will
// result in compilation errors.
type UnsafeStockServer interface {
	mustEmbedUnimplementedStockServer()
}

func RegisterStockServer(s grpc.ServiceRegistrar, srv StockServer) {
	s.RegisterService(&Stock_ServiceDesc, srv)
}

func _Stock_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stock/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).AddItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stock/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetItemList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetItemListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServer).GetItemList(m, &stockGetItemListServer{stream})
}

type Stock_GetItemListServer interface {
	Send(*GetItemListResponse) error
	grpc.ServerStream
}

type stockGetItemListServer struct {
	grpc.ServerStream
}

func (x *stockGetItemListServer) Send(m *GetItemListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Stock_ServiceDesc is the grpc.ServiceDesc for Stock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _Stock_AddItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Stock_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemList",
			Handler:       _Stock_GetItemList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/stock.proto",
}
